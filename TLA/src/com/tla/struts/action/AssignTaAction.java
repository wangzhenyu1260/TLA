/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.tla.struts.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.tla.domain.Course;
import com.tla.domain.CourseTa;
import com.tla.domain.TaLikeCourse;
import com.tla.service.imp.AssignServiceImp;
import com.tla.service.imp.CourseServiceImp;
import com.tla.service.imp.LikeServiceImp;
import com.tla.service.imp.TaServiceImp;
import com.tla.service.inter.AssignServiceInter;
import com.tla.service.inter.CourseServiceInter;
import com.tla.service.inter.LikeServiceInter;
import com.tla.service.inter.TaServiceInter;
import com.tla.struts.form.AssignTaForm;


/** 
 * MyEclipse Struts
 * Creation date: 05-25-2015
 * 
 * XDoclet definition:
 * @struts.action parameter="flag"
 */
public class AssignTaAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward assignTaUi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if (request.getSession().getAttribute("role").equals("secretary")) {
			// go to secretary assign TA page
			// load data
			CourseServiceInter courseService = new CourseServiceImp();
			TaServiceInter taService = new TaServiceImp();
			AssignServiceInter assignService = new AssignServiceImp();
			
			List<CourseTa> courseTaList = assignService.getAssignTas();
			List<Course> courseList = courseService.getCourses();
			
			HashMap<Integer, Course> map = new HashMap<>();
			for(int i=0;i<courseTaList.size();i++){
				map.put(courseTaList.get(i).getCourse().getId(), courseTaList.get(i).getCourse());
			}
			List<Course> newCourseList = new ArrayList<>();
			for(int j=0;j<courseList.size();j++){
				Course co = new Course();
				co.setId(courseList.get(j).getId());
				co.setName(courseList.get(j).getName());
				co.setInstructor(courseList.get(j).getInstructor());
				co.setTimeVenue(courseList.get(j).getTimeVenue());
				if(map.containsKey(courseList.get(j).getId())){
					co.setTa(courseTaList.get(j).getTeachingassistant().getName());
					co.setTaId(courseTaList.get(j).getTeachingassistant().getId()+"");
					co.setHaveTa(true);
				}else{
					co.setHaveTa(false);
				}
				// recommend TA 
				co.setRecommendTA(findRecommendTa(courseList.get(j).getId()+""));
				newCourseList.add(co);
			}
			
			
			request.setAttribute("courseList", newCourseList);
			request.setAttribute("taList", taService.getTas());
			
			// redirection
			return mapping.findForward("goAssignTaUi");

		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward assignTa(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if (request.getSession().getAttribute("role").equals("secretary")) {
			//get data
			AssignTaForm assginTaForm = (AssignTaForm) form;
			
			String tid = assginTaForm.getAssginTa();
			String cid = assginTaForm.getCourseId();
			
			AssignServiceInter assignService = new AssignServiceImp();
			
			if (assignService.checkCourseTa(cid)) {
				CourseServiceInter courseService = new CourseServiceImp();
				TaServiceInter taService = new TaServiceImp();

				CourseTa courseTa = new CourseTa();
				courseTa.setCourse(courseService.getUniqueCourseById(cid));
				courseTa.setTeachingassistant(taService.getUniqueTaById(tid));

				if (assignService.saveObject(courseTa)) {
					request.setAttribute("AssignOperation", "success");
				} else {
					request.setAttribute("AssignOperation", "error");
				}
			}else{
				request.setAttribute("AssignOperation", "error");
				request.setAttribute("ErrorInfo", "A TA has been assigned the course.");
			}
			
			return new ActionForward("/assignTa.do?flag=assignTaUi");

		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward updateAssignTa(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if (request.getSession().getAttribute("role").equals("secretary")) {
			//get data
			AssignTaForm assginTaForm = (AssignTaForm) form;
			
			String tid = assginTaForm.getAssginTa();
			String cid = assginTaForm.getCourseId();
			
			AssignServiceInter assignService = new AssignServiceImp();

			if (assignService.updateCourseTa(cid, tid)) {
				request.setAttribute("AssignOperation", "success");
			} else {
				request.setAttribute("AssignOperation", "error");
			}

			return new ActionForward("/assignTa.do?flag=assignTaUi");

		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	private String findRecommendTa(String cid){
		String str = "";
		LikeServiceInter likeService = new LikeServiceImp();
		List<TaLikeCourse> taLikeList = likeService.getTaLikeByCourseId(cid);
		for(int i=0;i<taLikeList.size();i++){
			if(i==taLikeList.size()-1){
				str=str+taLikeList.get(i).getTeachingassistant().getName();
			}else{
				str=str+taLikeList.get(i).getTeachingassistant().getName()+", ";
			}
		}
		return str;
	}
}