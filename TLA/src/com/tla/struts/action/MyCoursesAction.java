/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.tla.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.tla.domain.Course;
import com.tla.domain.Teacher;
import com.tla.service.imp.CourseServiceImp;
import com.tla.service.imp.TaServiceImp;
import com.tla.service.imp.TeacherServiceImp;
import com.tla.service.inter.CourseServiceInter;
import com.tla.service.inter.TaServiceInter;
import com.tla.service.inter.TeacherServiceInter;
import com.tla.struts.form.CourseForm;

/**
 * MyEclipse Struts Creation date: 05-24-2015
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="flag"
 */
public class MyCoursesAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward myCoursesUi(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if (request.getSession().getAttribute("role").equals("teacher")) {
			Teacher teacher = (Teacher)request.getSession().getAttribute("teacherinfo");
			// go to teacher my course page
			// load data
			TeacherServiceInter teacherService = new TeacherServiceImp();
			TaServiceInter taService = new TaServiceImp();
			CourseServiceInter courseService = new CourseServiceImp();
			
			request.setAttribute("teacherList", teacherService.getTeachers());
			request.setAttribute("taList", taService.getTas());
			request.setAttribute("courseList", courseService.getCoursesByTeacherId(teacher.getId()+""));
			// redirection
			return mapping.findForward("goMyCoursesUi");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward addCourse(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if (request.getSession().getAttribute("role").equals("teacher")) {
			// get data from page
			Teacher teacher = (Teacher)request.getSession().getAttribute("teacherinfo");
			CourseForm courseForm = (CourseForm) form;
			CourseServiceInter courseService = new CourseServiceImp();
			if(courseService.checkName(courseForm.getCourseName())){
				// construct a course to receive info from jsp
				Course course = new Course();
				
				course.setName(courseForm.getCourseName());
				String instructors = "";
				for(int i=0; i<courseForm.getInstructor().length;i++){
					if(i==courseForm.getInstructor().length-1){
						instructors=instructors+courseForm.getInstructor()[i];
					}else{
						instructors=instructors+courseForm.getInstructor()[i]+",";
					}
				}
				//System.out.println(instructors);
				course.setInstructor(instructors);
				course.setTimeVenue(courseForm.getTimeVenue());
				String tas = "";
				for(int j=0;j<courseForm.getFavoriteTA().length;j++){
					if(j==courseForm.getFavoriteTA().length-1){
						tas=tas+courseForm.getFavoriteTA()[j];
					}else{
						tas=tas+courseForm.getFavoriteTA()[j]+";";
					}
				}
				course.setFavoriteTa(tas);
				course.setNotes(courseForm.getNotes());
				course.setTeacher(teacher);
				if(courseService.saveObject(course)){
					request.setAttribute("CourseOperation", "success");
				}else{
					request.setAttribute("CourseOperation", "error");
				}
				
			}else{
				request.setAttribute("CourseOperation", "error");
				request.setAttribute("ErrorInfo", "This name '"+courseForm.getCourseName()+"' has been used before, please change one.");
			}
			
			// redirection
			return new ActionForward("/myCourses.do?flag=myCoursesUi");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
	public ActionForward deleteCourse(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if (request.getSession().getAttribute("role").equals("teacher")) {

			String cid = request.getParameter("cid");

			// delete the course
			CourseServiceInter courseService = new CourseServiceImp();
			if (courseService.deleteCourse(cid)) {
				request.setAttribute("CourseOperation", "success");
			} else {
				request.setAttribute("CourseOperation", "error");
			}

			return new ActionForward("/myCourses.do?flag=myCoursesUi");
		} else {
			request.setAttribute("msg", "ERROR: Permission denied.");
			return mapping.findForward("goLogin");
		}
	}
	
}